basePath: /
definitions:
  Camera:
    properties:
      createdAt:
        format: date-time
        type: string
      discovered:
        type: boolean
      hardwareId:
        type: string
      mediaUris:
        additionalProperties:
          type: string
        type: object
      name:
        type: string
      record:
        type: boolean
      recordWindow:
        type: integer
      saved:
        type: boolean
      updatedAt:
        format: date-time
        type: string
    required:
    - discovered
    - hardwareId
    - mediaUris
    - name
    - record
    - saved
    - updatedAt
    type: object
  Credentials:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  ErrorMessage:
    properties:
      error:
        type: string
      parameters:
        items: {}
        type: array
    required:
    - error
    - parameters
    type: object
  Errors:
    properties:
      errors:
        additionalProperties:
          items:
            $ref: '#/definitions/ErrorMessage'
          type: array
        type: object
    required:
    - errors
    type: object
  Health:
    properties:
      date:
        format: date-time
        type: string
    required:
    - date
    type: object
  P2PAccess:
    properties:
      host:
        type: string
      id:
        type: string
      password:
        type: string
      ssl:
        type: boolean
    required:
    - host
    - id
    - password
    - ssl
    type: object
  ResetPassword:
    properties:
      password:
        type: string
      passwordConfirmation:
        type: string
    required:
    - password
    - passwordConfirmation
    type: object
  Token:
    properties:
      accessToken:
        type: string
      expiresIn:
        type: integer
      issuedTokenType:
        type: string
      refreshToken:
        type: string
      refreshTokenExpiresIn:
        type: integer
      tokenType:
        type: string
    required:
    - accessToken
    - expiresIn
    - issuedTokenType
    - refreshToken
    - refreshTokenExpiresIn
    - tokenType
    type: object
  UpsertCamera:
    type: object
  User:
    properties:
      createdAt:
        format: date-time
        type: string
      updatedAt:
        format: date-time
        type: string
      username:
        type: string
    required:
    - createdAt
    - updatedAt
    - username
    type: object
  Version:
    properties:
      build:
        type: string
      version:
        type: string
    required:
    - build
    - version
    type: object
info:
  contact:
    email: nathanfaucett@gmail.com
    name: Nathan Faucett
  description: IPCameras API API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: IPCameras API
paths:
  /cameras:
    get:
      consumes:
      - application/json
      operationId: cameras
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/Camera'
            type: array
      security:
      - Authorization: []
      summary: Get all cameras
      tags:
      - camera
  /cameras/{hardwareId}:
    get:
      consumes:
      - application/json
      operationId: camera-by-hardware-id
      parameters:
      - description: Hardware Id
        in: path
        name: hardwareId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Camera'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Errors'
      security:
      - Authorization: []
      summary: Get camera by hardware id
      tags:
      - camera
    patch:
      consumes:
      - application/json
      operationId: update-camera-by-hardware-id
      parameters:
      - description: Hardware Id
        in: path
        name: hardwareId
        required: true
        type: string
      - description: Camera
        in: body
        name: updates
        required: true
        schema:
          $ref: '#/definitions/UpsertCamera'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Camera'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/Errors'
      security:
      - Authorization: []
      summary: update camera by hardware id
      tags:
      - camera
  /health:
    get:
      consumes:
      - application/json
      operationId: health-check
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Health'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Health'
      summary: Get Health Check
      tags:
      - app
  /p2p-access:
    get:
      consumes:
      - application/json
      operationId: p2p-access
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/P2PAccess'
      security:
      - Authorization: []
      summary: Get p2p access info
      tags:
      - app
  /token:
    post:
      consumes:
      - application/json
      operationId: token
      parameters:
      - description: user credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/Credentials'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/Token'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Errors'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Errors'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/Errors'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Errors'
      summary: create a token by authenticating a user
      tags:
      - token
  /user:
    get:
      consumes:
      - application/json
      operationId: current-user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Errors'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Errors'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/Errors'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Errors'
      security:
      - Authorization: []
      summary: Get current user
      tags:
      - current-user
  /user/reset-password:
    patch:
      consumes:
      - application/json
      operationId: reset-password
      parameters:
      - description: reset user's password
        in: body
        name: resetPassword
        required: true
        schema:
          $ref: '#/definitions/ResetPassword'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Errors'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/Errors'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/Errors'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Errors'
      security:
      - Authorization: []
      summary: Resets a user's password
      tags:
      - current-user
  /version:
    get:
      consumes:
      - application/json
      operationId: version
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Version'
      summary: Get Version
      tags:
      - app
securityDefinitions:
  Authorization:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
  Locale:
    in: header
    name: X-Locale
    type: apiKey
  Timezone:
    in: header
    name: X-Timezone
    type: apiKey
swagger: "2.0"
