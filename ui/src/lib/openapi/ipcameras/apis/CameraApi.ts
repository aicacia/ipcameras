/* tslint:disable */
/* eslint-disable */
/**
 * IPCameras API
 * IPCameras API API
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: nathanfaucett@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Camera,
  Errors,
} from '../models/index';
import {
    CameraFromJSON,
    CameraToJSON,
    ErrorsFromJSON,
    ErrorsToJSON,
} from '../models/index';

export interface CameraByHardwareIdRequest {
    hardwareId: string;
}

export interface UpdateCameraByHardwareIdRequest {
    hardwareId: string;
    updates: object;
}

/**
 * CameraApi - interface
 * 
 * @export
 * @interface CameraApiInterface
 */
export interface CameraApiInterface {
    /**
     * 
     * @summary Get camera by hardware id
     * @param {string} hardwareId Hardware Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CameraApiInterface
     */
    cameraByHardwareIdRaw(requestParameters: CameraByHardwareIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Camera>>;

    /**
     * Get camera by hardware id
     */
    cameraByHardwareId(hardwareId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Camera>;

    /**
     * 
     * @summary Get all cameras
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CameraApiInterface
     */
    camerasRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Camera>>>;

    /**
     * Get all cameras
     */
    cameras(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Camera>>;

    /**
     * 
     * @summary update camera by hardware id
     * @param {string} hardwareId Hardware Id
     * @param {object} updates Camera
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CameraApiInterface
     */
    updateCameraByHardwareIdRaw(requestParameters: UpdateCameraByHardwareIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Camera>>;

    /**
     * update camera by hardware id
     */
    updateCameraByHardwareId(hardwareId: string, updates: object, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Camera>;

}

/**
 * 
 */
export class CameraApi extends runtime.BaseAPI implements CameraApiInterface {

    /**
     * Get camera by hardware id
     */
    async cameraByHardwareIdRaw(requestParameters: CameraByHardwareIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Camera>> {
        if (requestParameters['hardwareId'] == null) {
            throw new runtime.RequiredError(
                'hardwareId',
                'Required parameter "hardwareId" was null or undefined when calling cameraByHardwareId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cameras/{hardwareId}`.replace(`{${"hardwareId"}}`, encodeURIComponent(String(requestParameters['hardwareId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CameraFromJSON(jsonValue));
    }

    /**
     * Get camera by hardware id
     */
    async cameraByHardwareId(hardwareId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Camera> {
        const response = await this.cameraByHardwareIdRaw({ hardwareId: hardwareId }, initOverrides);
        return await response.value();
    }

    /**
     * Get all cameras
     */
    async camerasRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Camera>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cameras`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CameraFromJSON));
    }

    /**
     * Get all cameras
     */
    async cameras(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Camera>> {
        const response = await this.camerasRaw(initOverrides);
        return await response.value();
    }

    /**
     * update camera by hardware id
     */
    async updateCameraByHardwareIdRaw(requestParameters: UpdateCameraByHardwareIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Camera>> {
        if (requestParameters['hardwareId'] == null) {
            throw new runtime.RequiredError(
                'hardwareId',
                'Required parameter "hardwareId" was null or undefined when calling updateCameraByHardwareId().'
            );
        }

        if (requestParameters['updates'] == null) {
            throw new runtime.RequiredError(
                'updates',
                'Required parameter "updates" was null or undefined when calling updateCameraByHardwareId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/cameras/{hardwareId}`.replace(`{${"hardwareId"}}`, encodeURIComponent(String(requestParameters['hardwareId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['updates'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CameraFromJSON(jsonValue));
    }

    /**
     * update camera by hardware id
     */
    async updateCameraByHardwareId(hardwareId: string, updates: object, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Camera> {
        const response = await this.updateCameraByHardwareIdRaw({ hardwareId: hardwareId, updates: updates }, initOverrides);
        return await response.value();
    }

}
